# THIS FILE IS AUTOMATICALLY GENERATED FROM generic-ast-generator.arr. PLEASE DO NOT EDIT.
provide *

include ast
include generic-ast-structs
import global as _
import base as _
generic-ast-visitor =
  {
    method s-underscore(self, l :: Loc):
      g-op("s-underscore", some(l), [list: ])
    end,
    method s-name(self, l :: Loc, s :: String):
      g-op("s-name", some(l), [list: g-str(s)])
    end,
    method s-global(self, s :: String):
      g-op("s-global", none, [list: g-str(s)])
    end,
    method s-type-global(self, s :: String):
      g-op("s-type-global", none, [list: g-str(s)])
    end,
    method s-atom(self, base :: String, serial :: Number):
      g-op("s-atom", none, [list: g-str(base), g-num(serial)])
    end,
    method app-info-c(self, is-recursive :: Boolean, is-tail :: Boolean):
      g-op("app-info-c", none, [list: g-bool(is-recursive), g-bool(is-tail)])
    end,
    method s-program(
        self,
        l :: Loc,
        _provide :: Provide,
        provided-types :: ProvideTypes,
        imports :: List<Import>,
        block :: Expr
      ):
      g-op("s-program",
        some(l),
        [list: 
          _provide.visit(self),
          provided-types.visit(self),
          g-list(self.list(imports)),
          block.visit(self)
        ])
    end,
    method s-include(self, l :: Loc, mod :: ImportType):
      g-op("s-include", some(l), [list: mod.visit(self)])
    end,
    method s-import(self, l :: Loc, file :: ImportType, name :: Name):
      g-op("s-import", some(l), [list: file.visit(self), name.visit(self)])
    end,
    method s-import-fields(
        self,
        l :: Loc,
        fields :: List<Name>,
        file :: ImportType
      ):
      g-op("s-import-fields",
        some(l),
        [list: g-list(self.list(fields)), file.visit(self)])
    end,
    method s-import-complete(
        self,
        l :: Loc,
        values :: List<Name>,
        types :: List<Name>,
        import-type :: ImportType,
        vals-name :: Name,
        types-name :: Name
      ):
      g-op("s-import-complete",
        some(l),
        [list: 
          g-list(self.list(values)),
          g-list(self.list(types)),
          import-type.visit(self),
          vals-name.visit(self),
          types-name.visit(self)
        ])
    end,
    method p-value(self, l :: Loc, v :: Name, ann :: Ann):
      g-op("p-value", some(l), [list: v.visit(self), ann.visit(self)])
    end,
    method p-alias(
        self,
        l :: Loc,
        in-name :: Name,
        out-name :: Name,
        mod :: Option<ImportType>
      ):
      g-op("p-alias",
        some(l),
        [list: 
          in-name.visit(self),
          out-name.visit(self),
          g-option(self.option(mod))
        ])
    end,
    method p-data(self, l :: Loc, d :: Name, mod :: Option<ImportType>):
      g-op("p-data", some(l), [list: d.visit(self), g-option(self.option(mod))])
    end,
    method s-provide(self, l :: Loc, block :: Expr):
      g-op("s-provide", some(l), [list: block.visit(self)])
    end,
    method s-provide-complete(
        self,
        l :: Loc,
        values :: List<ProvidedValue>,
        aliases :: List<ProvidedAlias>,
        data-definitions :: List<ProvidedDatatype>
      ):
      g-op("s-provide-complete",
        some(l),
        [list: 
          g-list(self.list(values)),
          g-list(self.list(aliases)),
          g-list(self.list(data-definitions))
        ])
    end,
    method s-provide-all(self, l :: Loc):
      g-op("s-provide-all", some(l), [list: ])
    end,
    method s-provide-none(self, l :: Loc):
      g-op("s-provide-none", some(l), [list: ])
    end,
    method s-provide-types(self, l :: Loc, ann :: List<AField>):
      g-op("s-provide-types", some(l), [list: g-list(self.list(ann))])
    end,
    method s-provide-types-all(self, l :: Loc):
      g-op("s-provide-types-all", some(l), [list: ])
    end,
    method s-provide-types-none(self, l :: Loc):
      g-op("s-provide-types-none", some(l), [list: ])
    end,
    method s-const-import(self, l :: Loc, mod :: String):
      g-op("s-const-import", some(l), [list: g-str(mod)])
    end,
    method s-special-import(
        self,
        l :: Loc,
        kind :: String,
        args :: List<String>
      ):
      g-op("s-special-import",
        some(l),
        [list: g-str(kind), g-list(args.map(g-str))])
    end,
    method h-use-loc(self, l :: Loc): g-op("h-use-loc", some(l), [list: ]) end,
    method s-let-bind(self, l :: Loc, b :: Bind, value :: Expr):
      g-op("s-let-bind", some(l), [list: b.visit(self), value.visit(self)])
    end,
    method s-var-bind(self, l :: Loc, b :: Bind, value :: Expr):
      g-op("s-var-bind", some(l), [list: b.visit(self), value.visit(self)])
    end,
    method s-letrec-bind(self, l :: Loc, b :: Bind, value :: Expr):
      g-op("s-letrec-bind", some(l), [list: b.visit(self), value.visit(self)])
    end,
    method s-type-bind(
        self,
        l :: Loc,
        name :: Name,
        params :: List<Name>,
        ann :: Ann
      ):
      g-op("s-type-bind",
        some(l),
        [list: name.visit(self), g-list(self.list(params)), ann.visit(self)])
    end,
    method s-newtype-bind(self, l :: Loc, name :: Name, namet :: Name):
      g-op("s-newtype-bind",
        some(l),
        [list: name.visit(self), namet.visit(self)])
    end,
    method s-defined-value(self, name :: String, value :: Expr):
      g-op("s-defined-value", none, [list: g-str(name), value.visit(self)])
    end,
    method s-defined-var(self, name :: String, id :: Name):
      g-op("s-defined-var", none, [list: g-str(name), id.visit(self)])
    end,
    method s-defined-type(self, name :: String, typ :: Ann):
      g-op("s-defined-type", none, [list: g-str(name), typ.visit(self)])
    end,
    method s-module(
        self,
        l :: Loc,
        answer :: Expr,
        defined-values :: List<DefinedValue>,
        defined-types :: List<DefinedType>,
        provided-values :: Expr,
        provided-types :: List<AField>,
        checks :: Expr
      ):
      g-op("s-module",
        some(l),
        [list: 
          answer.visit(self),
          g-list(self.list(defined-values)),
          g-list(self.list(defined-types)),
          provided-values.visit(self),
          g-list(self.list(provided-types)),
          checks.visit(self)
        ])
    end,
    method s-template(self, l :: Loc): g-op("s-template", some(l), [list: ]) end,
    method s-type-let-expr(
        self,
        l :: Loc,
        binds :: List<TypeLetBind>,
        body :: Expr,
        blocky :: Boolean
      ):
      g-op("s-type-let-expr",
        some(l),
        [list: g-list(self.list(binds)), body.visit(self), g-bool(blocky)])
    end,
    method s-let-expr(
        self,
        l :: Loc,
        binds :: List<LetBind>,
        body :: Expr,
        blocky :: Boolean
      ):
      g-op("s-let-expr",
        some(l),
        [list: g-list(self.list(binds)), body.visit(self), g-bool(blocky)])
    end,
    method s-letrec(
        self,
        l :: Loc,
        binds :: List<LetrecBind>,
        body :: Expr,
        blocky :: Boolean
      ):
      g-op("s-letrec",
        some(l),
        [list: g-list(self.list(binds)), body.visit(self), g-bool(blocky)])
    end,
    method s-hint-exp(self, l :: Loc, hints :: List<Hint>, exp :: Expr):
      g-op("s-hint-exp",
        some(l),
        [list: g-list(self.list(hints)), exp.visit(self)])
    end,
    method s-instantiate(self, l :: Loc, expr :: Expr, params :: List<Ann>):
      g-op("s-instantiate",
        some(l),
        [list: expr.visit(self), g-list(self.list(params))])
    end,
    method s-block(self, l :: Loc, stmts :: List<Expr>):
      g-op("s-block", some(l), [list: g-list(self.list(stmts))])
    end,
    method s-user-block(self, l :: Loc, body :: Expr):
      g-op("s-user-block", some(l), [list: body.visit(self)])
    end,
    method s-fun(
        self,
        l :: Loc,
        name :: String,
        params :: List<Name>,
        args :: List<Bind>,
        ann :: Ann,
        doc :: String,
        body :: Expr,
        _check-loc :: Option<Loc>,
        _check :: Option<Expr>,
        blocky :: Boolean
      ):
      g-op("s-fun",
        some(l),
        [list: 
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(args)),
          ann.visit(self),
          g-str(doc),
          body.visit(self),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check)),
          g-bool(blocky)
        ])
    end,
    method s-type(
        self,
        l :: Loc,
        name :: Name,
        params :: List<Name>,
        ann :: Ann
      ):
      g-op("s-type",
        some(l),
        [list: name.visit(self), g-list(self.list(params)), ann.visit(self)])
    end,
    method s-newtype(self, l :: Loc, name :: Name, namet :: Name):
      g-op("s-newtype", some(l), [list: name.visit(self), namet.visit(self)])
    end,
    method s-var(self, l :: Loc, name :: Bind, value :: Expr):
      g-op("s-var", some(l), [list: name.visit(self), value.visit(self)])
    end,
    method s-rec(self, l :: Loc, name :: Bind, value :: Expr):
      g-op("s-rec", some(l), [list: name.visit(self), value.visit(self)])
    end,
    method s-let(
        self,
        l :: Loc,
        name :: Bind,
        value :: Expr,
        keyword-val :: Boolean
      ):
      g-op("s-let",
        some(l),
        [list: name.visit(self), value.visit(self), g-bool(keyword-val)])
    end,
    method s-ref(self, l :: Loc, ann :: Option<Ann>):
      g-op("s-ref", some(l), [list: g-option(self.option(ann))])
    end,
    method s-contract(self, l :: Loc, name :: Name, ann :: Ann):
      g-op("s-contract", some(l), [list: name.visit(self), ann.visit(self)])
    end,
    method s-when(
        self,
        l :: Loc,
        test :: Expr,
        block :: Expr,
        blocky :: Boolean
      ):
      g-op("s-when",
        some(l),
        [list: test.visit(self), block.visit(self), g-bool(blocky)])
    end,
    method s-assign(self, l :: Loc, id :: Name, value :: Expr):
      g-op("s-assign", some(l), [list: id.visit(self), value.visit(self)])
    end,
    method s-if-pipe(
        self,
        l :: Loc,
        branches :: List<IfPipeBranch>,
        blocky :: Boolean
      ):
      g-op("s-if-pipe",
        some(l),
        [list: g-list(self.list(branches)), g-bool(blocky)])
    end,
    method s-if-pipe-else(
        self,
        l :: Loc,
        branches :: List<IfPipeBranch>,
        _else :: Expr,
        blocky :: Boolean
      ):
      g-op("s-if-pipe-else",
        some(l),
        [list: g-list(self.list(branches)), _else.visit(self), g-bool(blocky)])
    end,
    method s-if(self, l :: Loc, branches :: List<IfBranch>, blocky :: Boolean):
      g-op("s-if", some(l), [list: g-list(self.list(branches)), g-bool(blocky)])
    end,
    method s-if-else(
        self,
        l :: Loc,
        branches :: List<IfBranch>,
        _else :: Expr,
        blocky :: Boolean
      ):
      g-op("s-if-else",
        some(l),
        [list: g-list(self.list(branches)), _else.visit(self), g-bool(blocky)])
    end,
    method s-cases(
        self,
        l :: Loc,
        typ :: Ann,
        val :: Expr,
        branches :: List<CasesBranch>,
        blocky :: Boolean
      ):
      g-op("s-cases",
        some(l),
        [list: 
          typ.visit(self),
          val.visit(self),
          g-list(self.list(branches)),
          g-bool(blocky)
        ])
    end,
    method s-cases-else(
        self,
        l :: Loc,
        typ :: Ann,
        val :: Expr,
        branches :: List<CasesBranch>,
        _else :: Expr,
        blocky :: Boolean
      ):
      g-op("s-cases-else",
        some(l),
        [list: 
          typ.visit(self),
          val.visit(self),
          g-list(self.list(branches)),
          _else.visit(self),
          g-bool(blocky)
        ])
    end,
    method s-op(
        self,
        l :: Loc,
        op-l :: Loc,
        op :: String,
        left :: Expr,
        right :: Expr
      ):
      g-op("s-op",
        some(l),
        [list: g-loc(op-l), g-str(op), left.visit(self), right.visit(self)])
    end,
    method s-check-test(
        self,
        l :: Loc,
        op :: CheckOp,
        refinement :: Option<Expr>,
        left :: Expr,
        right :: Option<Expr>
      ):
      g-op("s-check-test",
        some(l),
        [list: 
          op.visit(self),
          g-option(self.option(refinement)),
          left.visit(self),
          g-option(self.option(right))
        ])
    end,
    method s-check-expr(self, l :: Loc, expr :: Expr, ann :: Ann):
      g-op("s-check-expr", some(l), [list: expr.visit(self), ann.visit(self)])
    end,
    method s-paren(self, l :: Loc, expr :: Expr):
      g-op("s-paren", some(l), [list: expr.visit(self)])
    end,
    method s-lam(
        self,
        l :: Loc,
        name :: String,
        params :: List<Name>,
        args :: List<Bind>,
        ann :: Ann,
        doc :: String,
        body :: Expr,
        _check-loc :: Option<Loc>,
        _check :: Option<Expr>,
        blocky :: Boolean
      ):
      g-op("s-lam",
        some(l),
        [list: 
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(args)),
          ann.visit(self),
          g-str(doc),
          body.visit(self),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check)),
          g-bool(blocky)
        ])
    end,
    method s-method(
        self,
        l :: Loc,
        name :: String,
        params :: List<Name>,
        args :: List<Bind>,
        ann :: Ann,
        doc :: String,
        body :: Expr,
        _check-loc :: Option<Loc>,
        _check :: Option<Expr>,
        blocky :: Boolean
      ):
      g-op("s-method",
        some(l),
        [list: 
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(args)),
          ann.visit(self),
          g-str(doc),
          body.visit(self),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check)),
          g-bool(blocky)
        ])
    end,
    method s-extend(self, l :: Loc, supe :: Expr, fields :: List<Member>):
      g-op("s-extend",
        some(l),
        [list: supe.visit(self), g-list(self.list(fields))])
    end,
    method s-update(self, l :: Loc, supe :: Expr, fields :: List<Member>):
      g-op("s-update",
        some(l),
        [list: supe.visit(self), g-list(self.list(fields))])
    end,
    method s-tuple(self, l :: Loc, fields :: List<Expr>):
      g-op("s-tuple", some(l), [list: g-list(self.list(fields))])
    end,
    method s-tuple-get(
        self,
        l :: Loc,
        tup :: Expr,
        index :: Number,
        index-loc :: Loc
      ):
      g-op("s-tuple-get",
        some(l),
        [list: tup.visit(self), g-num(index), g-loc(index-loc)])
    end,
    method s-obj(self, l :: Loc, fields :: List<Member>):
      g-op("s-obj", some(l), [list: g-list(self.list(fields))])
    end,
    method s-array(self, l :: Loc, values :: List<Expr>):
      g-op("s-array", some(l), [list: g-list(self.list(values))])
    end,
    method s-construct(
        self,
        l :: Loc,
        modifier :: ConstructModifier,
        constructor :: Expr,
        values :: List<Expr>
      ):
      g-op("s-construct",
        some(l),
        [list: 
          modifier.visit(self),
          constructor.visit(self),
          g-list(self.list(values))
        ])
    end,
    method s-app(self, l :: Loc, _fun :: Expr, args :: List<Expr>):
      g-op("s-app", some(l), [list: _fun.visit(self), g-list(self.list(args))])
    end,
    method s-app-enriched(
        self,
        l :: Loc,
        _fun :: Expr,
        args :: List<Expr>,
        app-info :: AppInfo
      ):
      g-op("s-app-enriched",
        some(l),
        [list: _fun.visit(self), g-list(self.list(args)), app-info.visit(self)])
    end,
    method s-prim-app(self, l :: Loc, _fun :: String, args :: List<Expr>):
      g-op("s-prim-app", some(l), [list: g-str(_fun), g-list(self.list(args))])
    end,
    method s-prim-val(self, l :: Loc, name :: String):
      g-op("s-prim-val", some(l), [list: g-str(name)])
    end,
    method s-id(self, l :: Loc, id :: Name):
      g-op("s-id", some(l), [list: id.visit(self)])
    end,
    method s-id-var(self, l :: Loc, id :: Name):
      g-op("s-id-var", some(l), [list: id.visit(self)])
    end,
    method s-id-letrec(self, l :: Loc, id :: Name, safe :: Boolean):
      g-op("s-id-letrec", some(l), [list: id.visit(self), g-bool(safe)])
    end,
    method s-undefined(self, l :: Loc):
      g-op("s-undefined", some(l), [list: ])
    end,
    method s-srcloc(self, l :: Loc, loc :: Loc):
      g-op("s-srcloc", some(l), [list: g-loc(loc)])
    end,
    method s-num(self, l :: Loc, n :: Number):
      g-op("s-num", some(l), [list: g-num(n)])
    end,
    method s-frac(self, l :: Loc, num :: NumInteger, den :: NumInteger):
      g-op("s-frac", some(l), [list: g-num(num), g-num(den)])
    end,
    method s-rfrac(self, l :: Loc, num :: NumInteger, den :: NumInteger):
      g-op("s-rfrac", some(l), [list: g-num(num), g-num(den)])
    end,
    method s-bool(self, l :: Loc, b :: Boolean):
      g-op("s-bool", some(l), [list: g-bool(b)])
    end,
    method s-str(self, l :: Loc, s :: String):
      g-op("s-str", some(l), [list: g-str(s)])
    end,
    method s-dot(self, l :: Loc, obj :: Expr, field :: String):
      g-op("s-dot", some(l), [list: obj.visit(self), g-str(field)])
    end,
    method s-get-bang(self, l :: Loc, obj :: Expr, field :: String):
      g-op("s-get-bang", some(l), [list: obj.visit(self), g-str(field)])
    end,
    method s-bracket(self, l :: Loc, obj :: Expr, key :: Expr):
      g-op("s-bracket", some(l), [list: obj.visit(self), key.visit(self)])
    end,
    method s-data(
        self,
        l :: Loc,
        name :: String,
        params :: List<Name>,
        mixins :: List<Expr>,
        variants :: List<Variant>,
        shared-members :: List<Member>,
        _check-loc :: Option<Loc>,
        _check :: Option<Expr>
      ):
      g-op("s-data",
        some(l),
        [list: 
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(mixins)),
          g-list(self.list(variants)),
          g-list(self.list(shared-members)),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check))
        ])
    end,
    method s-data-expr(
        self,
        l :: Loc,
        name :: String,
        namet :: Name,
        params :: List<Name>,
        mixins :: List<Expr>,
        variants :: List<Variant>,
        shared-members :: List<Member>,
        _check-loc :: Option<Loc>,
        _check :: Option<Expr>
      ):
      g-op("s-data-expr",
        some(l),
        [list: 
          g-str(name),
          namet.visit(self),
          g-list(self.list(params)),
          g-list(self.list(mixins)),
          g-list(self.list(variants)),
          g-list(self.list(shared-members)),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check))
        ])
    end,
    method s-for(
        self,
        l :: Loc,
        iterator :: Expr,
        bindings :: List<ForBind>,
        ann :: Ann,
        body :: Expr,
        blocky :: Boolean
      ):
      g-op("s-for",
        some(l),
        [list: 
          iterator.visit(self),
          g-list(self.list(bindings)),
          ann.visit(self),
          body.visit(self),
          g-bool(blocky)
        ])
    end,
    method s-check(
        self,
        l :: Loc,
        name :: Option<String>,
        body :: Expr,
        keyword-check :: Boolean
      ):
      g-op("s-check",
        some(l),
        [list: 
          g-option(name.and-then(g-str)),
          body.visit(self),
          g-bool(keyword-check)
        ])
    end,
    method s-reactor(self, l :: Loc, fields :: List<Member>):
      g-op("s-reactor", some(l), [list: g-list(self.list(fields))])
    end,
    method s-table-extend(
        self,
        l :: Loc,
        column-binds :: ColumnBinds,
        extensions :: List<TableExtendField>
      ):
      g-op("s-table-extend",
        some(l),
        [list: column-binds.visit(self), g-list(self.list(extensions))])
    end,
    method s-table-update(
        self,
        l :: Loc,
        column-binds :: ColumnBinds,
        updates :: List<Member>
      ):
      g-op("s-table-update",
        some(l),
        [list: column-binds.visit(self), g-list(self.list(updates))])
    end,
    method s-table-select(self, l :: Loc, columns :: List<Name>, table :: Expr):
      g-op("s-table-select",
        some(l),
        [list: g-list(self.list(columns)), table.visit(self)])
    end,
    method s-table-order(
        self,
        l :: Loc,
        table :: Expr,
        ordering :: List<ColumnSort>
      ):
      g-op("s-table-order",
        some(l),
        [list: table.visit(self), g-list(self.list(ordering))])
    end,
    method s-table-filter(
        self,
        l :: Loc,
        column-binds :: ColumnBinds,
        predicate :: Expr
      ):
      g-op("s-table-filter",
        some(l),
        [list: column-binds.visit(self), predicate.visit(self)])
    end,
    method s-table-extract(self, l :: Loc, column :: Name, table :: Expr):
      g-op("s-table-extract",
        some(l),
        [list: column.visit(self), table.visit(self)])
    end,
    method s-table(
        self,
        l :: Loc,
        headers :: List<FieldName>,
        rows :: List<TableRow>
      ):
      g-op("s-table",
        some(l),
        [list: g-list(self.list(headers)), g-list(self.list(rows))])
    end,
    method s-load-table(
        self,
        l :: Loc,
        headers :: List<FieldName>,
        spec :: List<LoadTableSpec>
      ):
      g-op("s-load-table",
        some(l),
        [list: g-list(self.list(headers)), g-list(self.list(spec))])
    end,
    method s-spy-block(
        self,
        l :: Loc,
        message :: Option<Expr>,
        contents :: List<SpyField>
      ):
      g-op("s-spy-block",
        some(l),
        [list: g-option(self.option(message)), g-list(self.list(contents))])
    end,
    method s-table-row(self, l :: Loc, elems :: List<Expr>):
      g-op("s-table-row", some(l), [list: g-list(self.list(elems))])
    end,
    method s-spy-name(self, l :: Loc, name :: Expr%(is-s-id)):
      g-op("s-spy-name", some(l), [list: name.visit(self)])
    end,
    method s-spy-expr(self, l :: Loc, name :: String, value :: Expr):
      g-op("s-spy-expr", some(l), [list: g-str(name), value.visit(self)])
    end,
    method s-construct-normal(self):
      g-op("s-construct-normal", none, [list: ])
    end,
    method s-construct-lazy(self): g-op("s-construct-lazy", none, [list: ]) end,
    method s-bind(self, l :: Loc, shadows :: Boolean, id :: Name, ann :: Ann):
      g-op("s-bind",
        some(l),
        [list: g-bool(shadows), id.visit(self), ann.visit(self)])
    end,
    method s-tuple-bind(
        self,
        l :: Loc,
        fields :: List<Bind>,
        as-name :: Option<Bind>
      ):
      g-op("s-tuple-bind",
        some(l),
        [list: g-list(self.list(fields)), g-option(self.option(as-name))])
    end,
    method s-data-field(self, l :: Loc, name :: String, value :: Expr):
      g-op("s-data-field", some(l), [list: g-str(name), value.visit(self)])
    end,
    method s-mutable-field(
        self,
        l :: Loc,
        name :: String,
        ann :: Ann,
        value :: Expr
      ):
      g-op("s-mutable-field",
        some(l),
        [list: g-str(name), ann.visit(self), value.visit(self)])
    end,
    method s-method-field(
        self,
        l :: Loc,
        name :: String,
        params :: List<Name>,
        args :: List<Bind>,
        ann :: Ann,
        doc :: String,
        body :: Expr,
        _check-loc :: Option<Loc>,
        _check :: Option<Expr>,
        blocky :: Boolean
      ):
      g-op("s-method-field",
        some(l),
        [list: 
          g-str(name),
          g-list(self.list(params)),
          g-list(self.list(args)),
          ann.visit(self),
          g-str(doc),
          body.visit(self),
          g-option(_check-loc.and-then(g-loc)),
          g-option(self.option(_check)),
          g-bool(blocky)
        ])
    end,
    method s-field-name(self, l :: Loc, name :: String, ann :: Ann):
      g-op("s-field-name", some(l), [list: g-str(name), ann.visit(self)])
    end,
    method s-for-bind(self, l :: Loc, bind :: Bind, value :: Expr):
      g-op("s-for-bind", some(l), [list: bind.visit(self), value.visit(self)])
    end,
    method s-column-binds(self, l :: Loc, binds :: List<Bind>, table :: Expr):
      g-op("s-column-binds",
        some(l),
        [list: g-list(self.list(binds)), table.visit(self)])
    end,
    method ASCENDING(self): g-op("ASCENDING", none, [list: ]) end,
    method DESCENDING(self): g-op("DESCENDING", none, [list: ]) end,
    method s-column-sort(
        self,
        l :: Loc,
        column :: Name,
        direction :: ColumnSortOrder
      ):
      g-op("s-column-sort",
        some(l),
        [list: column.visit(self), direction.visit(self)])
    end,
    method s-table-extend-field(
        self,
        l :: Loc,
        name :: String,
        value :: Expr,
        ann :: Ann
      ):
      g-op("s-table-extend-field",
        some(l),
        [list: g-str(name), value.visit(self), ann.visit(self)])
    end,
    method s-table-extend-reducer(
        self,
        l :: Loc,
        name :: String,
        reducer :: Expr,
        col :: Name,
        ann :: Ann
      ):
      g-op("s-table-extend-reducer",
        some(l),
        [list: 
          g-str(name),
          reducer.visit(self),
          col.visit(self),
          ann.visit(self)
        ])
    end,
    method s-sanitize(self, l :: Loc, name :: Name, sanitizer :: Expr):
      g-op("s-sanitize",
        some(l),
        [list: name.visit(self), sanitizer.visit(self)])
    end,
    method s-table-src(self, l :: Loc, src :: Expr):
      g-op("s-table-src", some(l), [list: src.visit(self)])
    end,
    method s-normal(self): g-op("s-normal", none, [list: ]) end,
    method s-mutable(self): g-op("s-mutable", none, [list: ]) end,
    method s-variant-member(
        self,
        l :: Loc,
        member-type :: VariantMemberType,
        bind :: Bind
      ):
      g-op("s-variant-member",
        some(l),
        [list: member-type.visit(self), bind.visit(self)])
    end,
    method s-variant(
        self,
        l :: Loc,
        constr-loc :: Loc,
        name :: String,
        members :: List<VariantMember>,
        with-members :: List<Member>
      ):
      g-op("s-variant",
        some(l),
        [list: 
          g-loc(constr-loc),
          g-str(name),
          g-list(self.list(members)),
          g-list(self.list(with-members))
        ])
    end,
    method s-singleton-variant(
        self,
        l :: Loc,
        name :: String,
        with-members :: List<Member>
      ):
      g-op("s-singleton-variant",
        some(l),
        [list: g-str(name), g-list(self.list(with-members))])
    end,
    method s-if-branch(self, l :: Loc, test :: Expr, body :: Expr):
      g-op("s-if-branch", some(l), [list: test.visit(self), body.visit(self)])
    end,
    method s-if-pipe-branch(self, l :: Loc, test :: Expr, body :: Expr):
      g-op("s-if-pipe-branch",
        some(l),
        [list: test.visit(self), body.visit(self)])
    end,
    method s-cases-bind-ref(self): g-op("s-cases-bind-ref", none, [list: ]) end,
    method s-cases-bind-normal(self):
      g-op("s-cases-bind-normal", none, [list: ])
    end,
    method s-cases-bind(
        self,
        l :: Loc,
        field-type :: CasesBindType,
        bind :: Bind
      ):
      g-op("s-cases-bind",
        some(l),
        [list: field-type.visit(self), bind.visit(self)])
    end,
    method s-cases-branch(
        self,
        l :: Loc,
        pat-loc :: Loc,
        name :: String,
        args :: List<CasesBind>,
        body :: Expr
      ):
      g-op("s-cases-branch",
        some(l),
        [list: 
          g-loc(pat-loc),
          g-str(name),
          g-list(self.list(args)),
          body.visit(self)
        ])
    end,
    method s-singleton-cases-branch(
        self,
        l :: Loc,
        pat-loc :: Loc,
        name :: String,
        body :: Expr
      ):
      g-op("s-singleton-cases-branch",
        some(l),
        [list: g-loc(pat-loc), g-str(name), body.visit(self)])
    end,
    method s-op-is(self, l :: Loc): g-op("s-op-is", some(l), [list: ]) end,
    method s-op-is-roughly(self, l :: Loc):
      g-op("s-op-is-roughly", some(l), [list: ])
    end,
    method s-op-is-op(self, l :: Loc, op :: String):
      g-op("s-op-is-op", some(l), [list: g-str(op)])
    end,
    method s-op-is-not(self, l :: Loc):
      g-op("s-op-is-not", some(l), [list: ])
    end,
    method s-op-is-not-op(self, l :: Loc, op :: String):
      g-op("s-op-is-not-op", some(l), [list: g-str(op)])
    end,
    method s-op-satisfies(self, l :: Loc):
      g-op("s-op-satisfies", some(l), [list: ])
    end,
    method s-op-satisfies-not(self, l :: Loc):
      g-op("s-op-satisfies-not", some(l), [list: ])
    end,
    method s-op-raises(self, l :: Loc):
      g-op("s-op-raises", some(l), [list: ])
    end,
    method s-op-raises-other(self, l :: Loc):
      g-op("s-op-raises-other", some(l), [list: ])
    end,
    method s-op-raises-not(self, l :: Loc):
      g-op("s-op-raises-not", some(l), [list: ])
    end,
    method s-op-raises-satisfies(self, l :: Loc):
      g-op("s-op-raises-satisfies", some(l), [list: ])
    end,
    method s-op-raises-violates(self, l :: Loc):
      g-op("s-op-raises-violates", some(l), [list: ])
    end,
    method a-blank(self): g-op("a-blank", none, [list: ]) end,
    method a-any(self, l :: Loc): g-op("a-any", some(l), [list: ]) end,
    method a-name(self, l :: Loc, id :: Name):
      g-op("a-name", some(l), [list: id.visit(self)])
    end,
    method a-type-var(self, l :: Loc, id :: Name):
      g-op("a-type-var", some(l), [list: id.visit(self)])
    end,
    method a-arrow(
        self,
        l :: Loc,
        args :: List<Ann>,
        ret :: Ann,
        use-parens :: Boolean
      ):
      g-op("a-arrow",
        some(l),
        [list: g-list(self.list(args)), ret.visit(self), g-bool(use-parens)])
    end,
    method a-arrow-argnames(
        self,
        l :: Loc,
        args :: List<AField>,
        ret :: Ann,
        use-parens :: Boolean
      ):
      g-op("a-arrow-argnames",
        some(l),
        [list: g-list(self.list(args)), ret.visit(self), g-bool(use-parens)])
    end,
    method a-method(self, l :: Loc, args :: List<Ann>, ret :: Ann):
      g-op("a-method",
        some(l),
        [list: g-list(self.list(args)), ret.visit(self)])
    end,
    method a-record(self, l :: Loc, fields :: List<AField>):
      g-op("a-record", some(l), [list: g-list(self.list(fields))])
    end,
    method a-tuple(self, l :: Loc, fields :: List<AField>):
      g-op("a-tuple", some(l), [list: g-list(self.list(fields))])
    end,
    method a-app(self, l :: Loc, ann :: Ann, args :: List<Ann>):
      g-op("a-app", some(l), [list: ann.visit(self), g-list(self.list(args))])
    end,
    method a-pred(self, l :: Loc, ann :: Ann, exp :: Expr):
      g-op("a-pred", some(l), [list: ann.visit(self), exp.visit(self)])
    end,
    method a-dot(self, l :: Loc, obj :: Name, field :: String):
      g-op("a-dot", some(l), [list: obj.visit(self), g-str(field)])
    end,
    method a-checked(self, checked :: Ann, residual :: Ann):
      g-op("a-checked", none, [list: checked.visit(self), residual.visit(self)])
    end,
    method a-field(self, l :: Loc, name :: String, ann :: Ann):
      g-op("a-field", some(l), [list: g-str(name), ann.visit(self)])
    end
  }
fun degeneric(g):
  cases(GenericAST) g:
    | g-op( maybe-loc,  op,  args) =>
      ask:
        | op == "s-underscore" then: s-underscore(maybe-loc.value)
        | op == "s-name" then: s-name(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-global" then: s-global(degeneric(args.get(0)))
        | op == "s-type-global" then: s-type-global(degeneric(args.get(0)))
        | op == "s-atom"
            then:
          s-atom(degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "app-info-c"
            then:
          app-info-c(degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "s-program"
            then:
          s-program(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)))
        | op == "s-include"
            then:
          s-include(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-import"
            then:
          s-import(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-import-fields"
            then:
          s-import-fields(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-import-complete"
            then:
          s-import-complete(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)))
        | op == "p-value"
            then:
          p-value(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "p-alias"
            then:
          p-alias(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "p-data"
            then:
          p-data(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-provide"
            then:
          s-provide(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-provide-complete"
            then:
          s-provide-complete(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-provide-all" then: s-provide-all(maybe-loc.value)
        | op == "s-provide-none" then: s-provide-none(maybe-loc.value)
        | op == "s-provide-types"
            then:
          s-provide-types(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-provide-types-all" then: s-provide-types-all(maybe-loc.value)
        | op == "s-provide-types-none"
            then:
          s-provide-types-none(maybe-loc.value)
        | op == "s-const-import"
            then:
          s-const-import(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-special-import"
            then:
          s-special-import(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "h-use-loc" then: h-use-loc(maybe-loc.value)
        | op == "s-let-bind"
            then:
          s-let-bind(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-var-bind"
            then:
          s-var-bind(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-letrec-bind"
            then:
          s-letrec-bind(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-type-bind"
            then:
          s-type-bind(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-newtype-bind"
            then:
          s-newtype-bind(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-defined-value"
            then:
          s-defined-value(degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "s-defined-var"
            then:
          s-defined-var(degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "s-defined-type"
            then:
          s-defined-type(degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "s-module"
            then:
          s-module(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)),
            degeneric(args.get(5)))
        | op == "s-template" then: s-template(maybe-loc.value)
        | op == "s-type-let-expr"
            then:
          s-type-let-expr(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-let-expr"
            then:
          s-let-expr(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-letrec"
            then:
          s-letrec(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-hint-exp"
            then:
          s-hint-exp(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-instantiate"
            then:
          s-instantiate(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-block" then: s-block(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-user-block"
            then:
          s-user-block(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-fun"
            then:
          s-fun(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)),
            degeneric(args.get(5)),
            degeneric(args.get(6)),
            degeneric(args.get(7)),
            degeneric(args.get(8)))
        | op == "s-type"
            then:
          s-type(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-newtype"
            then:
          s-newtype(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-var"
            then:
          s-var(maybe-loc.value, degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "s-rec"
            then:
          s-rec(maybe-loc.value, degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "s-let"
            then:
          s-let(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-ref" then: s-ref(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-contract"
            then:
          s-contract(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-when"
            then:
          s-when(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-assign"
            then:
          s-assign(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-if-pipe"
            then:
          s-if-pipe(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-if-pipe-else"
            then:
          s-if-pipe-else(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-if"
            then:
          s-if(maybe-loc.value, degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "s-if-else"
            then:
          s-if-else(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-cases"
            then:
          s-cases(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)))
        | op == "s-cases-else"
            then:
          s-cases-else(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)))
        | op == "s-op"
            then:
          s-op(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)))
        | op == "s-check-test"
            then:
          s-check-test(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)))
        | op == "s-check-expr"
            then:
          s-check-expr(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-paren" then: s-paren(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-lam"
            then:
          s-lam(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)),
            degeneric(args.get(5)),
            degeneric(args.get(6)),
            degeneric(args.get(7)),
            degeneric(args.get(8)))
        | op == "s-method"
            then:
          s-method(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)),
            degeneric(args.get(5)),
            degeneric(args.get(6)),
            degeneric(args.get(7)),
            degeneric(args.get(8)))
        | op == "s-extend"
            then:
          s-extend(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-update"
            then:
          s-update(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-tuple" then: s-tuple(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-tuple-get"
            then:
          s-tuple-get(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-obj" then: s-obj(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-array" then: s-array(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-construct"
            then:
          s-construct(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-app"
            then:
          s-app(maybe-loc.value, degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "s-app-enriched"
            then:
          s-app-enriched(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-prim-app"
            then:
          s-prim-app(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-prim-val"
            then:
          s-prim-val(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-id" then: s-id(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-id-var"
            then:
          s-id-var(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-id-letrec"
            then:
          s-id-letrec(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-undefined" then: s-undefined(maybe-loc.value)
        | op == "s-srcloc"
            then:
          s-srcloc(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-num" then: s-num(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-frac"
            then:
          s-frac(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-rfrac"
            then:
          s-rfrac(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-bool" then: s-bool(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-str" then: s-str(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-dot"
            then:
          s-dot(maybe-loc.value, degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "s-get-bang"
            then:
          s-get-bang(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-bracket"
            then:
          s-bracket(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-data"
            then:
          s-data(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)),
            degeneric(args.get(5)),
            degeneric(args.get(6)))
        | op == "s-data-expr"
            then:
          s-data-expr(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)),
            degeneric(args.get(5)),
            degeneric(args.get(6)),
            degeneric(args.get(7)))
        | op == "s-for"
            then:
          s-for(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)))
        | op == "s-check"
            then:
          s-check(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-reactor"
            then:
          s-reactor(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-table-extend"
            then:
          s-table-extend(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-table-update"
            then:
          s-table-update(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-table-select"
            then:
          s-table-select(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-table-order"
            then:
          s-table-order(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-table-filter"
            then:
          s-table-filter(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-table-extract"
            then:
          s-table-extract(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-table"
            then:
          s-table(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-load-table"
            then:
          s-load-table(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-spy-block"
            then:
          s-spy-block(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-table-row"
            then:
          s-table-row(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-spy-name"
            then:
          s-spy-name(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-spy-expr"
            then:
          s-spy-expr(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-construct-normal" then: s-construct-normal
        | op == "s-construct-lazy" then: s-construct-lazy
        | op == "s-bind"
            then:
          s-bind(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-tuple-bind"
            then:
          s-tuple-bind(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-data-field"
            then:
          s-data-field(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-mutable-field"
            then:
          s-mutable-field(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-method-field"
            then:
          s-method-field(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)),
            degeneric(args.get(4)),
            degeneric(args.get(5)),
            degeneric(args.get(6)),
            degeneric(args.get(7)),
            degeneric(args.get(8)))
        | op == "s-field-name"
            then:
          s-field-name(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-for-bind"
            then:
          s-for-bind(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-column-binds"
            then:
          s-column-binds(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "ASCENDING" then: ASCENDING
        | op == "DESCENDING" then: DESCENDING
        | op == "s-column-sort"
            then:
          s-column-sort(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-table-extend-field"
            then:
          s-table-extend-field(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-table-extend-reducer"
            then:
          s-table-extend-reducer(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)))
        | op == "s-sanitize"
            then:
          s-sanitize(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-table-src"
            then:
          s-table-src(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-normal" then: s-normal
        | op == "s-mutable" then: s-mutable
        | op == "s-variant-member"
            then:
          s-variant-member(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-variant"
            then:
          s-variant(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)))
        | op == "s-singleton-variant"
            then:
          s-singleton-variant(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-if-branch"
            then:
          s-if-branch(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-if-pipe-branch"
            then:
          s-if-pipe-branch(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-cases-bind-ref" then: s-cases-bind-ref
        | op == "s-cases-bind-normal" then: s-cases-bind-normal
        | op == "s-cases-bind"
            then:
          s-cases-bind(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "s-cases-branch"
            then:
          s-cases-branch(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)),
            degeneric(args.get(3)))
        | op == "s-singleton-cases-branch"
            then:
          s-singleton-cases-branch(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "s-op-is" then: s-op-is(maybe-loc.value)
        | op == "s-op-is-roughly" then: s-op-is-roughly(maybe-loc.value)
        | op == "s-op-is-op"
            then:
          s-op-is-op(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-op-is-not" then: s-op-is-not(maybe-loc.value)
        | op == "s-op-is-not-op"
            then:
          s-op-is-not-op(maybe-loc.value, degeneric(args.get(0)))
        | op == "s-op-satisfies" then: s-op-satisfies(maybe-loc.value)
        | op == "s-op-satisfies-not" then: s-op-satisfies-not(maybe-loc.value)
        | op == "s-op-raises" then: s-op-raises(maybe-loc.value)
        | op == "s-op-raises-other" then: s-op-raises-other(maybe-loc.value)
        | op == "s-op-raises-not" then: s-op-raises-not(maybe-loc.value)
        | op == "s-op-raises-satisfies"
            then:
          s-op-raises-satisfies(maybe-loc.value)
        | op == "s-op-raises-violates"
            then:
          s-op-raises-violates(maybe-loc.value)
        | op == "a-blank" then: a-blank
        | op == "a-any" then: a-any(maybe-loc.value)
        | op == "a-name" then: a-name(maybe-loc.value, degeneric(args.get(0)))
        | op == "a-type-var"
            then:
          a-type-var(maybe-loc.value, degeneric(args.get(0)))
        | op == "a-arrow"
            then:
          a-arrow(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "a-arrow-argnames"
            then:
          a-arrow-argnames(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)),
            degeneric(args.get(2)))
        | op == "a-method"
            then:
          a-method(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "a-record"
            then:
          a-record(maybe-loc.value, degeneric(args.get(0)))
        | op == "a-tuple" then: a-tuple(maybe-loc.value, degeneric(args.get(0)))
        | op == "a-app"
            then:
          a-app(maybe-loc.value, degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "a-pred"
            then:
          a-pred(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
        | op == "a-dot"
            then:
          a-dot(maybe-loc.value, degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "a-checked"
            then:
          a-checked(degeneric(args.get(0)), degeneric(args.get(1)))
        | op == "a-field"
            then:
          a-field(maybe-loc.value,
            degeneric(args.get(0)),
            degeneric(args.get(1)))
      end
    | g-str( s) => s
    | g-num( n) => n
    | g-bool( b) => b
    | g-loc( l) => l
    | g-underscore( l) => s-underscore(l)
    | g-list( lst) => lst.map(degeneric)
    | g-option( opt) => opt.and-then(degeneric)
  end
end